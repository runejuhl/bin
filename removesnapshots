#!/usr/bin/env python
"""Remove ZFS snapshots older than a certain date."""

from datetime import datetime, timedelta
import time
import subprocess
import argparse
from itertools import chain
import collections

def filtersnapshots(l, timedelta, volname):
    snapshots = []
    for i in l:
        if not i.startswith(volname +'@'):
            continue

        i = i.split()
        i = i[0]
        i = i.split('@')
        i = int(i[1])

        cutoff = int(time.mktime((datetime.now() - delta).timetuple()))

        if i < cutoff:
            snapshots.append(str(i))

    return snapshots

def getsnapshotlist():
    try:
        output = subprocess.check_output(['sudo', 'zfs', 'list', '-t', 'snapshot'])
        return output.split()
    except subprocess.CalledProcessError as e:
        print e.returncode, e.cmd, e.output
        raise e

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', help="increased output verbosity", action='store_true')
    parser.add_argument('-n', '--dry-run', help="simulate action", action='store_true')
    parser.add_argument('-o', '--older-than', help="remove all snapshots older than cutoff date", action='store_true')
    parser.add_argument('-V', '--volume-name', help="volume name", default='tank')
    parser.add_argument('timedelta', nargs='+', default='days=60', help="time delta")
    args = parser.parse_args()

    delta = map(lambda(x): x.split('='), args.timedelta)
    delta = dict(delta)
    delta = dict((k,int(v)) for k,v in delta.iteritems())
    delta = timedelta(**delta)

    l = getsnapshotlist()
    snapshotlist = filtersnapshots(l, delta, args.volume_name)

    if not snapshotlist:
        print 'No snapshots need deletion, exiting.'
        exit(0)

    command_args = []

    if args.verbose:
        command_args.append('-v')
        if args.older_than:
            print 'Will remove all snapshots older than ' + snapshotlist[-1]
        else:
            print 'Will remove the following snapshots: ' + ', '.join(snapshotlist)

    if args.dry_run:
        command_args.append('-n')


    command = ['sudo', 'zfs', 'destroy']

    # append flags for zfs
    for i in command_args:
        command.append(i)

    if args.older_than:
        command.append(args.volume_name + '@%' + snapshotlist[-1])
    else:
        command.append(args.volume_name + '@' + ','.join(snapshotlist))

    if args.verbose:
        print('Using the following command: {}'.format(' '.join(command)))

    try:
        output = subprocess.check_output(command)
    except subprocess.CalledProcessError as e:
        print e.returncode, e.cmd, e.output
        raise e
    except OSError as e:
        print 'Missing ZFS binary, most likely...'

    print output
